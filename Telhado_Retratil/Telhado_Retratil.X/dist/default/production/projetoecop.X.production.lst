

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Fri Dec 18 23:38:27 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    27  0000                     
    28                           ; Version 2.31
    29                           ; Generated 13/10/2020 GMT
    30                           ; 
    31                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution. Publication is not required when
    45                           ;        this file is used in an embedded application.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F4520 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     _PORTEbits	set	3972
    64  0000                     _TRISE	set	3990
    65  0000                     _TRISD	set	3989
    66  0000                     _TRISC	set	3988
    67  0000                     _TRISB	set	3987
    68  0000                     _TRISA	set	3986
    69  0000                     _PORTE	set	3972
    70  0000                     _PORTD	set	3971
    71  0000                     _PORTC	set	3970
    72  0000                     _PORTB	set	3969
    73  0000                     _PORTA	set	3968
    74  0000                     _PORTCbits	set	3970
    75  0000                     _TRISCbits	set	3988
    76  0000                     _ADRESL	set	4035
    77  0000                     _ADRESH	set	4036
    78  0000                     _ADCON0bits	set	4034
    79  0000                     _ADCON2	set	4032
    80  0000                     _ADCON1	set	4033
    81  0000                     _ADCON0	set	4034
    82                           
    83                           	psect	smallconst
    84  000600                     __psmallconst:
    85                           	callstack 0
    86  000600  00                 	db	0
    87  000601                     STR_1:
    88  000601  49                 	db	73	;'I'
    89  000602  6E                 	db	110	;'n'
    90  000603  69                 	db	105	;'i'
    91  000604  74                 	db	116	;'t'
    92  000605  20                 	db	32
    93  000606  53                 	db	83	;'S'
    94  000607  69                 	db	105	;'i'
    95  000608  73                 	db	115	;'s'
    96  000609  74                 	db	116	;'t'
    97  00060A  65                 	db	101	;'e'
    98  00060B  6D                 	db	109	;'m'
    99  00060C  61                 	db	97	;'a'
   100  00060D  00                 	db	0
   101  00060E                     STR_4:
   102  00060E  46                 	db	70	;'F'
   103  00060F  65                 	db	101	;'e'
   104  000610  63                 	db	99	;'c'
   105  000611  68                 	db	104	;'h'
   106  000612  61                 	db	97	;'a'
   107  000613  6E                 	db	110	;'n'
   108  000614  64                 	db	100	;'d'
   109  000615  6F                 	db	111	;'o'
   110  000616  20                 	db	32
   111  000617  00                 	db	0
   112  000618                     STR_3:
   113  000618  46                 	db	70	;'F'
   114  000619  65                 	db	101	;'e'
   115  00061A  63                 	db	99	;'c'
   116  00061B  68                 	db	104	;'h'
   117  00061C  61                 	db	97	;'a'
   118  00061D  6E                 	db	110	;'n'
   119  00061E  64                 	db	100	;'d'
   120  00061F  6F                 	db	111	;'o'
   121  000620  00                 	db	0
   122  000621                     STR_2:
   123  000621  41                 	db	65	;'A'
   124  000622  62                 	db	98	;'b'
   125  000623  72                 	db	114	;'r'
   126  000624  69                 	db	105	;'i'
   127  000625  6E                 	db	110	;'n'
   128  000626  64                 	db	100	;'d'
   129  000627  6F                 	db	111	;'o'
   130  000628  00                 	db	0
   131  000629  00                 	db	0	; dummy byte at the end
   132  0000                     
   133                           ; #config settings
   134                           
   135                           	psect	cinit
   136  000C28                     __pcinit:
   137                           	callstack 0
   138  000C28                     start_initialization:
   139                           	callstack 0
   140  000C28                     __initialization:
   141                           	callstack 0
   142  000C28                     end_of_initialization:
   143                           	callstack 0
   144  000C28                     __end_of__initialization:
   145                           	callstack 0
   146  000C28  0E00               	movlw	low (__Lmediumconst shr (0+16))
   147  000C2A  6EF8               	movwf	tblptru,c
   148  000C2C  0100               	movlb	0
   149  000C2E  EF15  F003         	goto	_main	;jump to C main() function
   150                           
   151                           	psect	cstackCOMRAM
   152  000001                     __pcstackCOMRAM:
   153                           	callstack 0
   154  000001                     ?_adc_amostra:
   155                           	callstack 0
   156  000001                     ?___lwmod:
   157                           	callstack 0
   158  000001                     lcd_wr@val:
   159                           	callstack 0
   160  000001                     atraso_ms@valor:
   161                           	callstack 0
   162  000001                     ___lwmod@dividend:
   163                           	callstack 0
   164                           
   165                           ; 2 bytes @ 0x0
   166  000001                     	ds	2
   167  000003                     ??_adc_amostra:
   168  000003                     atraso_ms@i:
   169                           	callstack 0
   170  000003                     ___lwmod@divisor:
   171                           	callstack 0
   172                           
   173                           ; 2 bytes @ 0x2
   174  000003                     	ds	2
   175  000005                     atraso_ms@j:
   176                           	callstack 0
   177  000005                     ___lwmod@counter:
   178                           	callstack 0
   179                           
   180                           ; 1 bytes @ 0x4
   181  000005                     	ds	1
   182  000006                     atraso_ms@k:
   183                           	callstack 0
   184                           
   185                           ; 1 bytes @ 0x5
   186  000006                     	ds	1
   187  000007                     adc_amostra@canal:
   188                           	callstack 0
   189  000007                     lcd_cmd@val:
   190                           	callstack 0
   191  000007                     lcd_dat@val:
   192                           	callstack 0
   193                           
   194                           ; 1 bytes @ 0x6
   195  000007                     	ds	1
   196  000008                     ?___wmul:
   197                           	callstack 0
   198  000008                     lcd_str@str:
   199                           	callstack 0
   200  000008                     ___wmul@multiplier:
   201                           	callstack 0
   202                           
   203                           ; 2 bytes @ 0x7
   204  000008                     	ds	2
   205  00000A                     ??_lcd_str:
   206  00000A                     ___wmul@multiplicand:
   207                           	callstack 0
   208                           
   209                           ; 2 bytes @ 0x9
   210  00000A                     	ds	2
   211  00000C                     lcd_str@i:
   212                           	callstack 0
   213  00000C                     ___wmul@product:
   214                           	callstack 0
   215                           
   216                           ; 2 bytes @ 0xB
   217  00000C                     	ds	2
   218  00000E                     ?___lwdiv:
   219                           	callstack 0
   220  00000E                     ___lwdiv@dividend:
   221                           	callstack 0
   222                           
   223                           ; 2 bytes @ 0xD
   224  00000E                     	ds	2
   225  000010                     ___lwdiv@divisor:
   226                           	callstack 0
   227                           
   228                           ; 2 bytes @ 0xF
   229  000010                     	ds	2
   230  000012                     ___lwdiv@quotient:
   231                           	callstack 0
   232                           
   233                           ; 2 bytes @ 0x11
   234  000012                     	ds	2
   235  000014                     ___lwdiv@counter:
   236                           	callstack 0
   237                           
   238                           ; 1 bytes @ 0x13
   239  000014                     	ds	1
   240  000015                     ??_pwmSet1:
   241  000015                     itoa@val:
   242                           	callstack 0
   243                           
   244                           ; 2 bytes @ 0x14
   245  000015                     	ds	2
   246  000017                     pwmSet1@porcento:
   247                           	callstack 0
   248  000017                     itoa@str:
   249                           	callstack 0
   250                           
   251                           ; 2 bytes @ 0x16
   252  000017                     	ds	1
   253  000018                     pwmSet1@val:
   254                           	callstack 0
   255                           
   256                           ; 2 bytes @ 0x17
   257  000018                     	ds	1
   258  000019                     
   259                           ; 1 bytes @ 0x18
   260  000019                     	ds	1
   261  00001A                     main@str:
   262                           	callstack 0
   263                           
   264                           ; 6 bytes @ 0x19
   265  00001A                     	ds	6
   266  000020                     main@tmp:
   267                           	callstack 0
   268                           
   269                           ; 1 bytes @ 0x1F
   270  000020                     	ds	1
   271  000021                     main@grau:
   272                           	callstack 0
   273                           
   274                           ; 1 bytes @ 0x20
   275  000021                     	ds	1
   276  000022                     main@temp:
   277                           	callstack 0
   278                           
   279                           ; 1 bytes @ 0x21
   280  000022                     	ds	1
   281                           
   282 ;;
   283 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   284 ;;
   285 ;; *************** function _main *****************
   286 ;; Defined at:
   287 ;;		line 14 in file "main.c"
   288 ;; Parameters:    Size  Location     Type
   289 ;;		None
   290 ;; Auto vars:     Size  Location     Type
   291 ;;  str             6   25[COMRAM] unsigned char [6]
   292 ;;  temp            1   33[COMRAM] unsigned char 
   293 ;;  grau            1   32[COMRAM] unsigned char 
   294 ;;  tmp             1   31[COMRAM] unsigned char 
   295 ;; Return value:  Size  Location     Type
   296 ;;                  1    wreg      void 
   297 ;; Registers used:
   298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   299 ;; Tracked objects:
   300 ;;		On entry : 0/0
   301 ;;		On exit  : 0/0
   302 ;;		Unchanged: 0/0
   303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   304 ;;      Params:         0       0       0       0       0       0       0
   305 ;;      Locals:         9       0       0       0       0       0       0
   306 ;;      Temps:          0       0       0       0       0       0       0
   307 ;;      Totals:         9       0       0       0       0       0       0
   308 ;;Total ram usage:        9 bytes
   309 ;; Hardware stack levels required when called:    3
   310 ;; This function calls:
   311 ;;		___lwdiv
   312 ;;		___wmul
   313 ;;		_adc_amostra
   314 ;;		_adc_init
   315 ;;		_atraso_ms
   316 ;;		_itoa
   317 ;;		_lcd_cmd
   318 ;;		_lcd_dat
   319 ;;		_lcd_init
   320 ;;		_lcd_str
   321 ;;		_pwmInit
   322 ;;		_pwmSet1
   323 ;; This function is called by:
   324 ;;		Startup code after reset
   325 ;; This function uses a non-reentrant model
   326 ;;
   327                           
   328                           	psect	text0
   329  00062A                     __ptext0:
   330                           	callstack 0
   331  00062A                     _main:
   332                           	callstack 28
   333  00062A                     
   334                           ;main.c: 16:     unsigned char tmp, temp;;main.c: 17:     char str[6],grau = 223;
   335  00062A  0EDF               	movlw	223
   336  00062C  6E21               	movwf	main@grau^0,c
   337                           
   338                           ;main.c: 20:     ADCON1 = 0x06;
   339  00062E  0E06               	movlw	6
   340  000630  6EC1               	movwf	193,c	;volatile
   341                           
   342                           ;main.c: 21:     TRISA = 0xC3;
   343  000632  0EC3               	movlw	195
   344  000634  6E92               	movwf	146,c	;volatile
   345                           
   346                           ;main.c: 22:     TRISB = 0x00;
   347  000636  0E00               	movlw	0
   348  000638  6E93               	movwf	147,c	;volatile
   349                           
   350                           ;main.c: 23:     TRISC = 0x00;
   351  00063A  0E00               	movlw	0
   352  00063C  6E94               	movwf	148,c	;volatile
   353                           
   354                           ;main.c: 24:     TRISD = 0x00;
   355  00063E  0E00               	movlw	0
   356  000640  6E95               	movwf	149,c	;volatile
   357                           
   358                           ;main.c: 25:     TRISE = 0x00;
   359  000642  0E00               	movlw	0
   360  000644  6E96               	movwf	150,c	;volatile
   361  000646                     
   362                           ;main.c: 27:     lcd_init();
   363  000646  EC70  F005         	call	_lcd_init	;wreg free
   364  00064A                     
   365                           ;main.c: 28:     adc_init();
   366  00064A  EC0D  F006         	call	_adc_init	;wreg free
   367  00064E                     
   368                           ;main.c: 29:     pwmInit();
   369  00064E  EC03  F006         	call	_pwmInit	;wreg free
   370  000652                     
   371                           ;main.c: 31:     lcd_cmd(0x01);
   372  000652  0E01               	movlw	1
   373  000654  ECDB  F005         	call	_lcd_cmd
   374  000658                     
   375                           ;main.c: 32:     lcd_cmd(0x80);
   376  000658  0E80               	movlw	128
   377  00065A  ECDB  F005         	call	_lcd_cmd
   378  00065E                     
   379                           ;main.c: 33:     lcd_str("Init Sistema");
   380  00065E  0E01               	movlw	low STR_1
   381  000660  6E08               	movwf	lcd_str@str^0,c
   382  000662  0E06               	movlw	high STR_1
   383  000664  6E09               	movwf	(lcd_str@str+1)^0,c
   384  000666  EC9E  F005         	call	_lcd_str	;wreg free
   385  00066A                     l1539:
   386                           
   387                           ;main.c: 39:         tmp = (adc_amostra(0)*10) / 204;
   388  00066A  0E00               	movlw	0
   389  00066C  EC54  F004         	call	_adc_amostra
   390  000670  C001  F008         	movff	?_adc_amostra,___wmul@multiplier
   391  000674  C002  F009         	movff	?_adc_amostra+1,___wmul@multiplier+1
   392  000678  0E00               	movlw	0
   393  00067A  6E0B               	movwf	(___wmul@multiplicand+1)^0,c
   394  00067C  0E0A               	movlw	10
   395  00067E  6E0A               	movwf	___wmul@multiplicand^0,c
   396  000680  ECF0  F005         	call	___wmul	;wreg free
   397  000684  C008  F00E         	movff	?___wmul,___lwdiv@dividend
   398  000688  C009  F00F         	movff	?___wmul+1,___lwdiv@dividend+1
   399  00068C  0E00               	movlw	0
   400  00068E  6E11               	movwf	(___lwdiv@divisor+1)^0,c
   401  000690  0ECC               	movlw	204
   402  000692  6E10               	movwf	___lwdiv@divisor^0,c
   403  000694  EC9C  F004         	call	___lwdiv	;wreg free
   404  000698  500E               	movf	?___lwdiv^0,w,c
   405  00069A  6E20               	movwf	main@tmp^0,c
   406  00069C                     
   407                           ;main.c: 40:         lcd_cmd(0xC0 + 1);
   408  00069C  0EC1               	movlw	193
   409  00069E  ECDB  F005         	call	_lcd_cmd
   410  0006A2                     
   411                           ;main.c: 42:         itoa(tmp, str);
   412  0006A2  C020  F015         	movff	main@tmp,itoa@val
   413  0006A6  6A16               	clrf	(itoa@val+1)^0,c
   414  0006A8  0E1A               	movlw	low main@str
   415  0006AA  6E17               	movwf	itoa@str^0,c
   416  0006AC  0E00               	movlw	high main@str
   417  0006AE  6E18               	movwf	(itoa@str+1)^0,c
   418  0006B0  ECD0  F003         	call	_itoa	;wreg free
   419  0006B4                     
   420                           ;main.c: 43:         temp = str[3];
   421  0006B4  C01D  F022         	movff	main@str+3,main@temp
   422  0006B8                     
   423                           ;main.c: 46:         if (temp == 48 && temp <= 50) {
   424  0006B8  0E30               	movlw	48
   425  0006BA  1822               	xorwf	main@temp^0,w,c
   426  0006BC  A4D8               	btfss	status,2,c
   427  0006BE  EF63  F003         	goto	u891
   428  0006C2  EF65  F003         	goto	u890
   429  0006C6                     u891:
   430  0006C6  EF79  F003         	goto	l1561
   431  0006CA                     u890:
   432  0006CA  0E33               	movlw	51
   433  0006CC  6022               	cpfslt	main@temp^0,c
   434  0006CE  EF6B  F003         	goto	u901
   435  0006D2  EF6D  F003         	goto	u900
   436  0006D6                     u901:
   437  0006D6  EF79  F003         	goto	l1561
   438  0006DA                     u900:
   439  0006DA                     
   440                           ;main.c: 47:             pwmSet1(92);
   441  0006DA  0E5C               	movlw	92
   442  0006DC  ECD6  F004         	call	_pwmSet1
   443  0006E0                     
   444                           ;main.c: 48:             lcd_str("Abrindo");
   445  0006E0  0E21               	movlw	low STR_2
   446  0006E2  6E08               	movwf	lcd_str@str^0,c
   447  0006E4  0E06               	movlw	high STR_2
   448  0006E6  6E09               	movwf	(lcd_str@str+1)^0,c
   449  0006E8  EC9E  F005         	call	_lcd_str	;wreg free
   450  0006EC                     
   451                           ;main.c: 49:             ((PORTB) |= (1<<1));
   452  0006EC  8281               	bsf	129,1,c	;volatile
   453  0006EE                     
   454                           ;main.c: 50:             ((PORTB) &= ~(1<<2));
   455  0006EE  9481               	bcf	129,2,c	;volatile
   456  0006F0                     
   457                           ;main.c: 51:             ((PORTB) &= ~(1<<3));
   458  0006F0  9681               	bcf	129,3,c	;volatile
   459  0006F2                     l1561:
   460                           
   461                           ;main.c: 53:         if (temp <= 52 && temp > 50) {
   462  0006F2  0E35               	movlw	53
   463  0006F4  6022               	cpfslt	main@temp^0,c
   464  0006F6  EF7F  F003         	goto	u911
   465  0006FA  EF81  F003         	goto	u910
   466  0006FE                     u911:
   467  0006FE  EF95  F003         	goto	l1575
   468  000702                     u910:
   469  000702  0E32               	movlw	50
   470  000704  6422               	cpfsgt	main@temp^0,c
   471  000706  EF87  F003         	goto	u921
   472  00070A  EF89  F003         	goto	u920
   473  00070E                     u921:
   474  00070E  EF95  F003         	goto	l1575
   475  000712                     u920:
   476  000712                     
   477                           ;main.c: 54:             pwmSet1(92);
   478  000712  0E5C               	movlw	92
   479  000714  ECD6  F004         	call	_pwmSet1
   480  000718                     
   481                           ;main.c: 55:             lcd_str("Fechando");
   482  000718  0E18               	movlw	low STR_3
   483  00071A  6E08               	movwf	lcd_str@str^0,c
   484  00071C  0E06               	movlw	high STR_3
   485  00071E  6E09               	movwf	(lcd_str@str+1)^0,c
   486  000720  EC9E  F005         	call	_lcd_str	;wreg free
   487  000724                     
   488                           ;main.c: 56:             ((PORTB) |= (1<<1));
   489  000724  8281               	bsf	129,1,c	;volatile
   490  000726                     
   491                           ;main.c: 57:             ((PORTB) |= (1<<2));
   492  000726  8481               	bsf	129,2,c	;volatile
   493  000728                     
   494                           ;main.c: 58:             ((PORTB) &= ~(1<<3));
   495  000728  9681               	bcf	129,3,c	;volatile
   496  00072A                     l1575:
   497                           
   498                           ;main.c: 60:         if (temp <= 53 && temp > 52) {
   499  00072A  0E36               	movlw	54
   500  00072C  6022               	cpfslt	main@temp^0,c
   501  00072E  EF9B  F003         	goto	u931
   502  000732  EF9D  F003         	goto	u930
   503  000736                     u931:
   504  000736  EFB1  F003         	goto	l1589
   505  00073A                     u930:
   506  00073A  0E34               	movlw	52
   507  00073C  6422               	cpfsgt	main@temp^0,c
   508  00073E  EFA3  F003         	goto	u941
   509  000742  EFA5  F003         	goto	u940
   510  000746                     u941:
   511  000746  EFB1  F003         	goto	l1589
   512  00074A                     u940:
   513  00074A                     
   514                           ;main.c: 61:             pwmSet1(0);
   515  00074A  0E00               	movlw	0
   516  00074C  ECD6  F004         	call	_pwmSet1
   517  000750                     
   518                           ;main.c: 62:             lcd_str("Fechando ");
   519  000750  0E0E               	movlw	low STR_4
   520  000752  6E08               	movwf	lcd_str@str^0,c
   521  000754  0E06               	movlw	high STR_4
   522  000756  6E09               	movwf	(lcd_str@str+1)^0,c
   523  000758  EC9E  F005         	call	_lcd_str	;wreg free
   524  00075C                     
   525                           ;main.c: 63:             ((PORTB) |= (1<<1));
   526  00075C  8281               	bsf	129,1,c	;volatile
   527  00075E                     
   528                           ;main.c: 64:             ((PORTB) |= (1<<2));
   529  00075E  8481               	bsf	129,2,c	;volatile
   530  000760                     
   531                           ;main.c: 65:             ((PORTB) |= (1<<3));
   532  000760  8681               	bsf	129,3,c	;volatile
   533  000762                     l1589:
   534                           
   535                           ;main.c: 68:         lcd_dat(str[3]);
   536  000762  501D               	movf	(main@str+3)^0,w,c
   537  000764  ECC6  F005         	call	_lcd_dat
   538  000768                     
   539                           ;main.c: 69:         lcd_dat('V');
   540  000768  0E56               	movlw	86
   541  00076A  ECC6  F005         	call	_lcd_dat
   542  00076E                     
   543                           ;main.c: 70:         lcd_dat(' ');
   544  00076E  0E20               	movlw	32
   545  000770  ECC6  F005         	call	_lcd_dat
   546  000774                     
   547                           ;main.c: 71:         lcd_dat(str[3]);
   548  000774  501D               	movf	(main@str+3)^0,w,c
   549  000776  ECC6  F005         	call	_lcd_dat
   550  00077A                     
   551                           ;main.c: 72:         lcd_dat(str[4]);
   552  00077A  501E               	movf	(main@str+4)^0,w,c
   553  00077C  ECC6  F005         	call	_lcd_dat
   554  000780                     
   555                           ;main.c: 73:         lcd_dat(grau);
   556  000780  5021               	movf	main@grau^0,w,c
   557  000782  ECC6  F005         	call	_lcd_dat
   558  000786                     
   559                           ;main.c: 74:         lcd_dat('C');
   560  000786  0E43               	movlw	67
   561  000788  ECC6  F005         	call	_lcd_dat
   562  00078C                     
   563                           ;main.c: 76:         atraso_ms(10);
   564  00078C  0E00               	movlw	0
   565  00078E  6E02               	movwf	(atraso_ms@valor+1)^0,c
   566  000790  0E0A               	movlw	10
   567  000792  6E01               	movwf	atraso_ms@valor^0,c
   568  000794  EC0C  F005         	call	_atraso_ms	;wreg free
   569                           
   570                           ;main.c: 77:     }
   571  000798  EF35  F003         	goto	l1539
   572  00079C  EF00  F000         	goto	start
   573  0007A0                     __end_of_main:
   574                           	callstack 0
   575                           
   576 ;; *************** function _pwmSet1 *****************
   577 ;; Defined at:
   578 ;;		line 23 in file "pwm.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;  porcento        1    wreg     unsigned char 
   581 ;; Auto vars:     Size  Location     Type
   582 ;;  porcento        1   22[COMRAM] unsigned char 
   583 ;;  val             2   23[COMRAM] unsigned int 
   584 ;; Return value:  Size  Location     Type
   585 ;;                  1    wreg      void 
   586 ;; Registers used:
   587 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   588 ;; Tracked objects:
   589 ;;		On entry : 0/0
   590 ;;		On exit  : 0/0
   591 ;;		Unchanged: 0/0
   592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   593 ;;      Params:         0       0       0       0       0       0       0
   594 ;;      Locals:         3       0       0       0       0       0       0
   595 ;;      Temps:          2       0       0       0       0       0       0
   596 ;;      Totals:         5       0       0       0       0       0       0
   597 ;;Total ram usage:        5 bytes
   598 ;; Hardware stack levels used:    1
   599 ;; Hardware stack levels required when called:    1
   600 ;; This function calls:
   601 ;;		___lwdiv
   602 ;;		___wmul
   603 ;; This function is called by:
   604 ;;		_main
   605 ;; This function uses a non-reentrant model
   606 ;;
   607                           
   608                           	psect	text1
   609  0009AC                     __ptext1:
   610                           	callstack 0
   611  0009AC                     _pwmSet1:
   612                           	callstack 29
   613                           
   614                           ;incstack = 0
   615                           ;pwmSet1@porcento stored from wreg
   616  0009AC  6E17               	movwf	pwmSet1@porcento^0,c
   617  0009AE                     
   618                           ;pwm.c: 23: void pwmSet1(unsigned char porcento);pwm.c: 24: {;pwm.c: 30:  unsigned int v
      +                          al = ((unsigned int)porcento) *((*(volatile __near unsigned char*)0xFCB)+1);
   619  0009AE  0E01               	movlw	1
   620  0009B0  24CB               	addwf	203,w,c	;volatile
   621  0009B2  6E08               	movwf	___wmul@multiplier^0,c
   622  0009B4  6A09               	clrf	(___wmul@multiplier+1)^0,c
   623  0009B6  0E00               	movlw	0
   624  0009B8  2209               	addwfc	(___wmul@multiplier+1)^0,f,c
   625  0009BA  C017  F00A         	movff	pwmSet1@porcento,___wmul@multiplicand
   626  0009BE  6A0B               	clrf	(___wmul@multiplicand+1)^0,c
   627  0009C0  ECF0  F005         	call	___wmul	;wreg free
   628  0009C4  C008  F018         	movff	?___wmul,pwmSet1@val
   629  0009C8  C009  F019         	movff	?___wmul+1,pwmSet1@val+1
   630  0009CC                     
   631                           ;pwm.c: 31:  val = val / 25;
   632  0009CC  C018  F00E         	movff	pwmSet1@val,___lwdiv@dividend
   633  0009D0  C019  F00F         	movff	pwmSet1@val+1,___lwdiv@dividend+1
   634  0009D4  0E00               	movlw	0
   635  0009D6  6E11               	movwf	(___lwdiv@divisor+1)^0,c
   636  0009D8  0E19               	movlw	25
   637  0009DA  6E10               	movwf	___lwdiv@divisor^0,c
   638  0009DC  EC9C  F004         	call	___lwdiv	;wreg free
   639  0009E0  C00E  F018         	movff	?___lwdiv,pwmSet1@val
   640  0009E4  C00F  F019         	movff	?___lwdiv+1,pwmSet1@val+1
   641  0009E8                     
   642                           ;pwm.c: 33:  val &= 0x03ff;
   643  0009E8  0EFF               	movlw	255
   644  0009EA  1618               	andwf	pwmSet1@val^0,f,c
   645  0009EC  0E03               	movlw	3
   646  0009EE  1619               	andwf	(pwmSet1@val+1)^0,f,c
   647  0009F0                     
   648                           ;pwm.c: 35:  (*(volatile __near unsigned char*)0xFBE) = val >> 2;
   649  0009F0  C018  F015         	movff	pwmSet1@val,??_pwmSet1
   650  0009F4  C019  F016         	movff	pwmSet1@val+1,??_pwmSet1+1
   651  0009F8  90D8               	bcf	status,0,c
   652  0009FA  3216               	rrcf	(??_pwmSet1+1)^0,f,c
   653  0009FC  3215               	rrcf	??_pwmSet1^0,f,c
   654  0009FE  90D8               	bcf	status,0,c
   655  000A00  3216               	rrcf	(??_pwmSet1+1)^0,f,c
   656  000A02  3215               	rrcf	??_pwmSet1^0,f,c
   657  000A04  5015               	movf	??_pwmSet1^0,w,c
   658  000A06  6EBE               	movwf	190,c	;volatile
   659  000A08                     
   660                           ;pwm.c: 37:  (*(volatile __near unsigned char*)0xFBD) |= (val & 0x0003) << 4;
   661  000A08  C018  F015         	movff	pwmSet1@val,??_pwmSet1
   662  000A0C  0E03               	movlw	3
   663  000A0E  1615               	andwf	??_pwmSet1^0,f,c
   664  000A10  3815               	swapf	??_pwmSet1^0,w,c
   665  000A12  0BF0               	andlw	240
   666  000A14  12BD               	iorwf	189,f,c	;volatile
   667  000A16  0012               	return		;funcret
   668  000A18                     __end_of_pwmSet1:
   669                           	callstack 0
   670                           
   671 ;; *************** function ___wmul *****************
   672 ;; Defined at:
   673 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\Umul16.c"
   674 ;; Parameters:    Size  Location     Type
   675 ;;  multiplier      2    7[COMRAM] unsigned int 
   676 ;;  multiplicand    2    9[COMRAM] unsigned int 
   677 ;; Auto vars:     Size  Location     Type
   678 ;;  product         2   11[COMRAM] unsigned int 
   679 ;; Return value:  Size  Location     Type
   680 ;;                  2    7[COMRAM] unsigned int 
   681 ;; Registers used:
   682 ;;		wreg, status,2, status,0, prodl, prodh
   683 ;; Tracked objects:
   684 ;;		On entry : 0/0
   685 ;;		On exit  : 0/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   688 ;;      Params:         4       0       0       0       0       0       0
   689 ;;      Locals:         2       0       0       0       0       0       0
   690 ;;      Temps:          0       0       0       0       0       0       0
   691 ;;      Totals:         6       0       0       0       0       0       0
   692 ;;Total ram usage:        6 bytes
   693 ;; Hardware stack levels used:    1
   694 ;; This function calls:
   695 ;;		Nothing
   696 ;; This function is called by:
   697 ;;		_main
   698 ;;		_pwmSet1
   699 ;;		_pwmSet2
   700 ;; This function uses a non-reentrant model
   701 ;;
   702                           
   703                           	psect	text2
   704  000BE0                     __ptext2:
   705                           	callstack 0
   706  000BE0                     ___wmul:
   707                           	callstack 29
   708  000BE0  5008               	movf	___wmul@multiplier^0,w,c
   709  000BE2  020A               	mulwf	___wmul@multiplicand^0,c
   710  000BE4  CFF3 F00C          	movff	prodl,___wmul@product
   711  000BE8  CFF4 F00D          	movff	prodh,___wmul@product+1
   712  000BEC  5008               	movf	___wmul@multiplier^0,w,c
   713  000BEE  020B               	mulwf	(___wmul@multiplicand+1)^0,c
   714  000BF0  50F3               	movf	243,w,c
   715  000BF2  260D               	addwf	(___wmul@product+1)^0,f,c
   716  000BF4  5009               	movf	(___wmul@multiplier+1)^0,w,c
   717  000BF6  020A               	mulwf	___wmul@multiplicand^0,c
   718  000BF8  50F3               	movf	243,w,c
   719  000BFA  260D               	addwf	(___wmul@product+1)^0,f,c
   720  000BFC  C00C  F008         	movff	___wmul@product,?___wmul
   721  000C00  C00D  F009         	movff	___wmul@product+1,?___wmul+1
   722  000C04  0012               	return		;funcret
   723  000C06                     __end_of___wmul:
   724                           	callstack 0
   725                           
   726 ;; *************** function _pwmInit *****************
   727 ;; Defined at:
   728 ;;		line 59 in file "pwm.c"
   729 ;; Parameters:    Size  Location     Type
   730 ;;		None
   731 ;; Auto vars:     Size  Location     Type
   732 ;;		None
   733 ;; Return value:  Size  Location     Type
   734 ;;                  1    wreg      void 
   735 ;; Registers used:
   736 ;;		wreg, status,2, status,0
   737 ;; Tracked objects:
   738 ;;		On entry : 0/0
   739 ;;		On exit  : 0/0
   740 ;;		Unchanged: 0/0
   741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   742 ;;      Params:         0       0       0       0       0       0       0
   743 ;;      Locals:         0       0       0       0       0       0       0
   744 ;;      Temps:          0       0       0       0       0       0       0
   745 ;;      Totals:         0       0       0       0       0       0       0
   746 ;;Total ram usage:        0 bytes
   747 ;; Hardware stack levels used:    1
   748 ;; This function calls:
   749 ;;		Nothing
   750 ;; This function is called by:
   751 ;;		_main
   752 ;; This function uses a non-reentrant model
   753 ;;
   754                           
   755                           	psect	text3
   756  000C06                     __ptext3:
   757                           	callstack 0
   758  000C06                     _pwmInit:
   759                           	callstack 30
   760  000C06                     
   761                           ;pwm.c: 61:  (((*(volatile __near unsigned char*)0xF94)) &= ~(1<<1));
   762  000C06  9294               	bcf	148,1,c	;volatile
   763                           
   764                           ;pwm.c: 62:  (((*(volatile __near unsigned char*)0xF94)) &= ~(1<<2));
   765  000C08  9494               	bcf	148,2,c	;volatile
   766  000C0A                     
   767                           ;pwm.c: 64:  (*(volatile __near unsigned char*)0xFCA) |= 0b00000011;
   768  000C0A  0E03               	movlw	3
   769  000C0C  12CA               	iorwf	202,f,c	;volatile
   770  000C0E                     
   771                           ;pwm.c: 65:  (((*(volatile __near unsigned char*)0xFCA)) |= (1<<2));
   772  000C0E  84CA               	bsf	202,2,c	;volatile
   773                           
   774                           ;pwm.c: 68:  (*(volatile __near unsigned char*)0xFBD) |= 0b00001100;
   775  000C10  0E0C               	movlw	12
   776  000C12  12BD               	iorwf	189,f,c	;volatile
   777                           
   778                           ;pwm.c: 69:  (*(volatile __near unsigned char*)0xFBA) |= 0b00001100;
   779  000C14  0E0C               	movlw	12
   780  000C16  12BA               	iorwf	186,f,c	;volatile
   781  000C18  0012               	return		;funcret
   782  000C1A                     __end_of_pwmInit:
   783                           	callstack 0
   784                           
   785 ;; *************** function _lcd_str *****************
   786 ;; Defined at:
   787 ;;		line 76 in file "lcd.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  str             2    7[COMRAM] PTR const unsigned char 
   790 ;;		 -> STR_4(10), STR_3(9), STR_2(8), STR_1(13), 
   791 ;; Auto vars:     Size  Location     Type
   792 ;;  i               1   11[COMRAM] unsigned char 
   793 ;; Return value:  Size  Location     Type
   794 ;;                  1    wreg      void 
   795 ;; Registers used:
   796 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   802 ;;      Params:         2       0       0       0       0       0       0
   803 ;;      Locals:         1       0       0       0       0       0       0
   804 ;;      Temps:          2       0       0       0       0       0       0
   805 ;;      Totals:         5       0       0       0       0       0       0
   806 ;;Total ram usage:        5 bytes
   807 ;; Hardware stack levels used:    1
   808 ;; Hardware stack levels required when called:    2
   809 ;; This function calls:
   810 ;;		_lcd_dat
   811 ;; This function is called by:
   812 ;;		_main
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           	psect	text4
   817  000B3C                     __ptext4:
   818                           	callstack 0
   819  000B3C                     _lcd_str:
   820                           	callstack 28
   821  000B3C                     
   822                           ;lcd.c: 76: void lcd_str(const char* str);lcd.c: 77: {;lcd.c: 78:  unsigned char i=0;
   823  000B3C  0E00               	movlw	0
   824  000B3E  6E0C               	movwf	lcd_str@i^0,c
   825                           
   826                           ;lcd.c: 80:  while(str[i] != 0 )
   827  000B40  EFB1  F005         	goto	l1509
   828  000B44                     l1505:
   829                           
   830                           ;lcd.c: 81:  {;lcd.c: 82:    lcd_dat(str[i]);
   831  000B44  500C               	movf	lcd_str@i^0,w,c
   832  000B46  2408               	addwf	lcd_str@str^0,w,c
   833  000B48  6E0A               	movwf	??_lcd_str^0,c
   834  000B4A  0E00               	movlw	0
   835  000B4C  2009               	addwfc	(lcd_str@str+1)^0,w,c
   836  000B4E  6E0B               	movwf	(??_lcd_str+1)^0,c
   837  000B50  C00A  FFF6         	movff	??_lcd_str,tblptrl
   838  000B54  C00B  FFF7         	movff	??_lcd_str+1,tblptrh
   839  000B58                     	if	0	;tblptru may be non-zero
   840  000B58                     	endif
   841  000B58                     	if	0	;tblptru may be non-zero
   842  000B58                     	endif
   843  000B58  0008               	tblrd		*
   844  000B5A  50F5               	movf	tablat,w,c
   845  000B5C  ECC6  F005         	call	_lcd_dat
   846  000B60                     
   847                           ;lcd.c: 83:    i++;
   848  000B60  2A0C               	incf	lcd_str@i^0,f,c
   849  000B62                     l1509:
   850                           
   851                           ;lcd.c: 80:  while(str[i] != 0 )
   852  000B62  500C               	movf	lcd_str@i^0,w,c
   853  000B64  2408               	addwf	lcd_str@str^0,w,c
   854  000B66  6E0A               	movwf	??_lcd_str^0,c
   855  000B68  0E00               	movlw	0
   856  000B6A  2009               	addwfc	(lcd_str@str+1)^0,w,c
   857  000B6C  6E0B               	movwf	(??_lcd_str+1)^0,c
   858  000B6E  C00A  FFF6         	movff	??_lcd_str,tblptrl
   859  000B72  C00B  FFF7         	movff	??_lcd_str+1,tblptrh
   860  000B76                     	if	0	;tblptru may be non-zero
   861  000B76                     	endif
   862  000B76                     	if	0	;tblptru may be non-zero
   863  000B76                     	endif
   864  000B76  0008               	tblrd		*
   865  000B78  50F5               	movf	tablat,w,c
   866  000B7A  0900               	iorlw	0
   867  000B7C  A4D8               	btfss	status,2,c
   868  000B7E  EFC3  F005         	goto	u881
   869  000B82  EFC5  F005         	goto	u880
   870  000B86                     u881:
   871  000B86  EFA2  F005         	goto	l1505
   872  000B8A                     u880:
   873  000B8A  0012               	return		;funcret
   874  000B8C                     __end_of_lcd_str:
   875                           	callstack 0
   876                           
   877 ;; *************** function _lcd_dat *****************
   878 ;; Defined at:
   879 ;;		line 46 in file "lcd.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;  val             1    wreg     unsigned char 
   882 ;; Auto vars:     Size  Location     Type
   883 ;;  val             1    6[COMRAM] unsigned char 
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		wreg, status,2, status,0, cstack
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   893 ;;      Params:         0       0       0       0       0       0       0
   894 ;;      Locals:         1       0       0       0       0       0       0
   895 ;;      Temps:          0       0       0       0       0       0       0
   896 ;;      Totals:         1       0       0       0       0       0       0
   897 ;;Total ram usage:        1 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; Hardware stack levels required when called:    1
   900 ;; This function calls:
   901 ;;		_atraso_ms
   902 ;;		_lcd_wr
   903 ;; This function is called by:
   904 ;;		_lcd_str
   905 ;;		_main
   906 ;; This function uses a non-reentrant model
   907 ;;
   908                           
   909                           	psect	text5
   910  000B8C                     __ptext5:
   911                           	callstack 0
   912  000B8C                     _lcd_dat:
   913                           	callstack 28
   914                           
   915                           ;incstack = 0
   916                           ;lcd_dat@val stored from wreg
   917  000B8C  6E07               	movwf	lcd_dat@val^0,c
   918  000B8E                     
   919                           ;lcd.c: 46: void lcd_dat(unsigned char val);lcd.c: 47: {;lcd.c: 48:  PORTEbits.RE1=1;
   920  000B8E  8284               	bsf	132,1,c	;volatile
   921  000B90                     
   922                           ;lcd.c: 49:         lcd_wr(val);
   923  000B90  5007               	movf	lcd_dat@val^0,w,c
   924  000B92  EC19  F006         	call	_lcd_wr
   925  000B96                     
   926                           ;lcd.c: 50:         PORTEbits.RE2=1;
   927  000B96  8484               	bsf	132,2,c	;volatile
   928  000B98                     
   929                           ;lcd.c: 51:         atraso_ms(3);
   930  000B98  0E00               	movlw	0
   931  000B9A  6E02               	movwf	(atraso_ms@valor+1)^0,c
   932  000B9C  0E03               	movlw	3
   933  000B9E  6E01               	movwf	atraso_ms@valor^0,c
   934  000BA0  EC0C  F005         	call	_atraso_ms	;wreg free
   935  000BA4                     
   936                           ;lcd.c: 52:         PORTEbits.RE1=0;
   937  000BA4  9284               	bcf	132,1,c	;volatile
   938  000BA6                     
   939                           ;lcd.c: 53:         atraso_ms(3);
   940  000BA6  0E00               	movlw	0
   941  000BA8  6E02               	movwf	(atraso_ms@valor+1)^0,c
   942  000BAA  0E03               	movlw	3
   943  000BAC  6E01               	movwf	atraso_ms@valor^0,c
   944  000BAE  EC0C  F005         	call	_atraso_ms	;wreg free
   945  000BB2                     
   946                           ;lcd.c: 54:  PORTEbits.RE1=1;
   947  000BB2  8284               	bsf	132,1,c	;volatile
   948  000BB4  0012               	return		;funcret
   949  000BB6                     __end_of_lcd_dat:
   950                           	callstack 0
   951                           
   952 ;; *************** function _lcd_init *****************
   953 ;; Defined at:
   954 ;;		line 57 in file "lcd.c"
   955 ;; Parameters:    Size  Location     Type
   956 ;;		None
   957 ;; Auto vars:     Size  Location     Type
   958 ;;		None
   959 ;; Return value:  Size  Location     Type
   960 ;;                  1    wreg      void 
   961 ;; Registers used:
   962 ;;		wreg, status,2, status,0, cstack
   963 ;; Tracked objects:
   964 ;;		On entry : 0/0
   965 ;;		On exit  : 0/0
   966 ;;		Unchanged: 0/0
   967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   968 ;;      Params:         0       0       0       0       0       0       0
   969 ;;      Locals:         0       0       0       0       0       0       0
   970 ;;      Temps:          0       0       0       0       0       0       0
   971 ;;      Totals:         0       0       0       0       0       0       0
   972 ;;Total ram usage:        0 bytes
   973 ;; Hardware stack levels used:    1
   974 ;; Hardware stack levels required when called:    2
   975 ;; This function calls:
   976 ;;		_atraso_ms
   977 ;;		_lcd_cmd
   978 ;; This function is called by:
   979 ;;		_main
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983                           	psect	text6
   984  000AE0                     __ptext6:
   985                           	callstack 0
   986  000AE0                     _lcd_init:
   987                           	callstack 28
   988  000AE0                     
   989                           ;lcd.c: 59:  PORTEbits.RE1=0;
   990  000AE0  9284               	bcf	132,1,c	;volatile
   991                           
   992                           ;lcd.c: 60:  PORTEbits.RE2=0;
   993  000AE2  9484               	bcf	132,2,c	;volatile
   994  000AE4                     
   995                           ;lcd.c: 61:  atraso_ms(20);
   996  000AE4  0E00               	movlw	0
   997  000AE6  6E02               	movwf	(atraso_ms@valor+1)^0,c
   998  000AE8  0E14               	movlw	20
   999  000AEA  6E01               	movwf	atraso_ms@valor^0,c
  1000  000AEC  EC0C  F005         	call	_atraso_ms	;wreg free
  1001  000AF0                     
  1002                           ;lcd.c: 62:  PORTEbits.RE1=1;
  1003  000AF0  8284               	bsf	132,1,c	;volatile
  1004                           
  1005                           ;lcd.c: 64:  lcd_cmd(0x38);
  1006  000AF2  0E38               	movlw	56
  1007  000AF4  ECDB  F005         	call	_lcd_cmd
  1008                           
  1009                           ;lcd.c: 65:  atraso_ms(5);
  1010  000AF8  0E00               	movlw	0
  1011  000AFA  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1012  000AFC  0E05               	movlw	5
  1013  000AFE  6E01               	movwf	atraso_ms@valor^0,c
  1014  000B00  EC0C  F005         	call	_atraso_ms	;wreg free
  1015                           
  1016                           ;lcd.c: 66:  lcd_cmd(0x38);
  1017  000B04  0E38               	movlw	56
  1018  000B06  ECDB  F005         	call	_lcd_cmd
  1019                           
  1020                           ;lcd.c: 67:         atraso_ms(1);
  1021  000B0A  0E00               	movlw	0
  1022  000B0C  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1023  000B0E  0E01               	movlw	1
  1024  000B10  6E01               	movwf	atraso_ms@valor^0,c
  1025  000B12  EC0C  F005         	call	_atraso_ms	;wreg free
  1026                           
  1027                           ;lcd.c: 68:  lcd_cmd(0x38);
  1028  000B16  0E38               	movlw	56
  1029  000B18  ECDB  F005         	call	_lcd_cmd
  1030                           
  1031                           ;lcd.c: 69:  lcd_cmd(0x08);
  1032  000B1C  0E08               	movlw	8
  1033  000B1E  ECDB  F005         	call	_lcd_cmd
  1034                           
  1035                           ;lcd.c: 70:  lcd_cmd(0x0F);
  1036  000B22  0E0F               	movlw	15
  1037  000B24  ECDB  F005         	call	_lcd_cmd
  1038                           
  1039                           ;lcd.c: 71:  lcd_cmd(0x01);
  1040  000B28  0E01               	movlw	1
  1041  000B2A  ECDB  F005         	call	_lcd_cmd
  1042                           
  1043                           ;lcd.c: 72:  lcd_cmd(0x38);
  1044  000B2E  0E38               	movlw	56
  1045  000B30  ECDB  F005         	call	_lcd_cmd
  1046                           
  1047                           ;lcd.c: 73:         lcd_cmd(0x80);
  1048  000B34  0E80               	movlw	128
  1049  000B36  ECDB  F005         	call	_lcd_cmd
  1050  000B3A  0012               	return		;funcret
  1051  000B3C                     __end_of_lcd_init:
  1052                           	callstack 0
  1053                           
  1054 ;; *************** function _lcd_cmd *****************
  1055 ;; Defined at:
  1056 ;;		line 35 in file "lcd.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;  val             1    wreg     unsigned char 
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  val             1    6[COMRAM] unsigned char 
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  1    wreg      void 
  1063 ;; Registers used:
  1064 ;;		wreg, status,2, status,0, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1070 ;;      Params:         0       0       0       0       0       0       0
  1071 ;;      Locals:         1       0       0       0       0       0       0
  1072 ;;      Temps:          0       0       0       0       0       0       0
  1073 ;;      Totals:         1       0       0       0       0       0       0
  1074 ;;Total ram usage:        1 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; Hardware stack levels required when called:    1
  1077 ;; This function calls:
  1078 ;;		_atraso_ms
  1079 ;;		_lcd_wr
  1080 ;; This function is called by:
  1081 ;;		_lcd_init
  1082 ;;		_main
  1083 ;; This function uses a non-reentrant model
  1084 ;;
  1085                           
  1086                           	psect	text7
  1087  000BB6                     __ptext7:
  1088                           	callstack 0
  1089  000BB6                     _lcd_cmd:
  1090                           	callstack 28
  1091                           
  1092                           ;incstack = 0
  1093                           ;lcd_cmd@val stored from wreg
  1094  000BB6  6E07               	movwf	lcd_cmd@val^0,c
  1095  000BB8                     
  1096                           ;lcd.c: 35: void lcd_cmd(unsigned char val);lcd.c: 36: {;lcd.c: 37:  PORTEbits.RE1=1;
  1097  000BB8  8284               	bsf	132,1,c	;volatile
  1098  000BBA                     
  1099                           ;lcd.c: 38:         lcd_wr(val);
  1100  000BBA  5007               	movf	lcd_cmd@val^0,w,c
  1101  000BBC  EC19  F006         	call	_lcd_wr
  1102  000BC0                     
  1103                           ;lcd.c: 39:         PORTEbits.RE2=0;
  1104  000BC0  9484               	bcf	132,2,c	;volatile
  1105  000BC2                     
  1106                           ;lcd.c: 40:         atraso_ms(3);
  1107  000BC2  0E00               	movlw	0
  1108  000BC4  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1109  000BC6  0E03               	movlw	3
  1110  000BC8  6E01               	movwf	atraso_ms@valor^0,c
  1111  000BCA  EC0C  F005         	call	_atraso_ms	;wreg free
  1112  000BCE                     
  1113                           ;lcd.c: 41:         PORTEbits.RE1=0;
  1114  000BCE  9284               	bcf	132,1,c	;volatile
  1115  000BD0                     
  1116                           ;lcd.c: 42:         atraso_ms(3);
  1117  000BD0  0E00               	movlw	0
  1118  000BD2  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1119  000BD4  0E03               	movlw	3
  1120  000BD6  6E01               	movwf	atraso_ms@valor^0,c
  1121  000BD8  EC0C  F005         	call	_atraso_ms	;wreg free
  1122  000BDC                     
  1123                           ;lcd.c: 43:  PORTEbits.RE1=1;
  1124  000BDC  8284               	bsf	132,1,c	;volatile
  1125  000BDE  0012               	return		;funcret
  1126  000BE0                     __end_of_lcd_cmd:
  1127                           	callstack 0
  1128                           
  1129 ;; *************** function _lcd_wr *****************
  1130 ;; Defined at:
  1131 ;;		line 30 in file "lcd.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;  val             1    wreg     unsigned char 
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;  val             1    0[COMRAM] unsigned char 
  1136 ;; Return value:  Size  Location     Type
  1137 ;;                  1    wreg      void 
  1138 ;; Registers used:
  1139 ;;		wreg
  1140 ;; Tracked objects:
  1141 ;;		On entry : 0/0
  1142 ;;		On exit  : 0/0
  1143 ;;		Unchanged: 0/0
  1144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1145 ;;      Params:         0       0       0       0       0       0       0
  1146 ;;      Locals:         1       0       0       0       0       0       0
  1147 ;;      Temps:          0       0       0       0       0       0       0
  1148 ;;      Totals:         1       0       0       0       0       0       0
  1149 ;;Total ram usage:        1 bytes
  1150 ;; Hardware stack levels used:    1
  1151 ;; This function calls:
  1152 ;;		Nothing
  1153 ;; This function is called by:
  1154 ;;		_lcd_cmd
  1155 ;;		_lcd_dat
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           	psect	text8
  1160  000C32                     __ptext8:
  1161                           	callstack 0
  1162  000C32                     _lcd_wr:
  1163                           	callstack 28
  1164                           
  1165                           ;incstack = 0
  1166                           ;lcd_wr@val stored from wreg
  1167  000C32  6E01               	movwf	lcd_wr@val^0,c
  1168  000C34                     
  1169                           ;lcd.c: 30: void lcd_wr(unsigned char val);lcd.c: 31: {;lcd.c: 32:   PORTD=val;
  1170  000C34  C001  FF83         	movff	lcd_wr@val,3971	;volatile
  1171  000C38  0012               	return		;funcret
  1172  000C3A                     __end_of_lcd_wr:
  1173                           	callstack 0
  1174                           
  1175 ;; *************** function _atraso_ms *****************
  1176 ;; Defined at:
  1177 ;;		line 26 in file "atraso.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;  valor           2    0[COMRAM] unsigned int 
  1180 ;; Auto vars:     Size  Location     Type
  1181 ;;  i               2    2[COMRAM] unsigned int 
  1182 ;;  k               1    5[COMRAM] volatile unsigned char 
  1183 ;;  j               1    4[COMRAM] volatile unsigned char 
  1184 ;; Return value:  Size  Location     Type
  1185 ;;                  1    wreg      void 
  1186 ;; Registers used:
  1187 ;;		wreg, status,2, status,0
  1188 ;; Tracked objects:
  1189 ;;		On entry : 0/0
  1190 ;;		On exit  : 0/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1193 ;;      Params:         2       0       0       0       0       0       0
  1194 ;;      Locals:         4       0       0       0       0       0       0
  1195 ;;      Temps:          0       0       0       0       0       0       0
  1196 ;;      Totals:         6       0       0       0       0       0       0
  1197 ;;Total ram usage:        6 bytes
  1198 ;; Hardware stack levels used:    1
  1199 ;; This function calls:
  1200 ;;		Nothing
  1201 ;; This function is called by:
  1202 ;;		_lcd_cmd
  1203 ;;		_lcd_dat
  1204 ;;		_lcd_init
  1205 ;;		_main
  1206 ;; This function uses a non-reentrant model
  1207 ;;
  1208                           
  1209                           	psect	text9
  1210  000A18                     __ptext9:
  1211                           	callstack 0
  1212  000A18                     _atraso_ms:
  1213                           	callstack 28
  1214  000A18                     
  1215                           ;atraso.c: 27:     unsigned int i;;atraso.c: 28:     volatile unsigned char j, k;;atraso
      +                          .c: 30:     for (i = 0; i < valor; i++) {
  1216  000A18  0E00               	movlw	0
  1217  000A1A  6E04               	movwf	(atraso_ms@i+1)^0,c
  1218  000A1C  0E00               	movlw	0
  1219  000A1E  6E03               	movwf	atraso_ms@i^0,c
  1220  000A20  EF32  F005         	goto	l1403
  1221  000A24                     l1381:
  1222                           
  1223                           ;atraso.c: 32:         for (j = 0; j < 41; j++) {
  1224  000A24  0E00               	movlw	0
  1225  000A26  6E05               	movwf	atraso_ms@j^0,c	;volatile
  1226  000A28                     l1383:
  1227  000A28  0E28               	movlw	40
  1228  000A2A  6405               	cpfsgt	atraso_ms@j^0,c	;volatile
  1229  000A2C  EF1A  F005         	goto	u771
  1230  000A30  EF1C  F005         	goto	u770
  1231  000A34                     u771:
  1232  000A34  EF1E  F005         	goto	l1387
  1233  000A38                     u770:
  1234  000A38  EF30  F005         	goto	l1401
  1235  000A3C                     l1387:
  1236                           
  1237                           ;atraso.c: 33:             for (k = 0; k < 3; k++);
  1238  000A3C  0E00               	movlw	0
  1239  000A3E  6E06               	movwf	atraso_ms@k^0,c	;volatile
  1240  000A40                     l1389:
  1241  000A40  0E02               	movlw	2
  1242  000A42  6406               	cpfsgt	atraso_ms@k^0,c	;volatile
  1243  000A44  EF26  F005         	goto	u781
  1244  000A48  EF28  F005         	goto	u780
  1245  000A4C                     u781:
  1246  000A4C  EF2A  F005         	goto	l1393
  1247  000A50                     u780:
  1248  000A50  EF2D  F005         	goto	l1397
  1249  000A54                     l1393:
  1250  000A54  2A06               	incf	atraso_ms@k^0,f,c	;volatile
  1251  000A56  EF20  F005         	goto	l1389
  1252  000A5A                     l1397:
  1253                           
  1254                           ;atraso.c: 34:         }
  1255  000A5A  2A05               	incf	atraso_ms@j^0,f,c	;volatile
  1256  000A5C  EF14  F005         	goto	l1383
  1257  000A60                     l1401:
  1258                           
  1259                           ;atraso.c: 35:     }
  1260  000A60  4A03               	infsnz	atraso_ms@i^0,f,c
  1261  000A62  2A04               	incf	(atraso_ms@i+1)^0,f,c
  1262  000A64                     l1403:
  1263  000A64  5001               	movf	atraso_ms@valor^0,w,c
  1264  000A66  5C03               	subwf	atraso_ms@i^0,w,c
  1265  000A68  5002               	movf	(atraso_ms@valor+1)^0,w,c
  1266  000A6A  5804               	subwfb	(atraso_ms@i+1)^0,w,c
  1267  000A6C  A0D8               	btfss	status,0,c
  1268  000A6E  EF3B  F005         	goto	u791
  1269  000A72  EF3D  F005         	goto	u790
  1270  000A76                     u791:
  1271  000A76  EF12  F005         	goto	l1381
  1272  000A7A                     u790:
  1273  000A7A  0012               	return		;funcret
  1274  000A7C                     __end_of_atraso_ms:
  1275                           	callstack 0
  1276                           
  1277 ;; *************** function _itoa *****************
  1278 ;; Defined at:
  1279 ;;		line 80 in file "main.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;  val             2   20[COMRAM] unsigned int 
  1282 ;;  str             2   22[COMRAM] PTR unsigned char 
  1283 ;;		 -> main@str(6), 
  1284 ;; Auto vars:     Size  Location     Type
  1285 ;;		None
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  1    wreg      void 
  1288 ;; Registers used:
  1289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1295 ;;      Params:         4       0       0       0       0       0       0
  1296 ;;      Locals:         0       0       0       0       0       0       0
  1297 ;;      Temps:          0       0       0       0       0       0       0
  1298 ;;      Totals:         4       0       0       0       0       0       0
  1299 ;;Total ram usage:        4 bytes
  1300 ;; Hardware stack levels used:    1
  1301 ;; Hardware stack levels required when called:    1
  1302 ;; This function calls:
  1303 ;;		___lwdiv
  1304 ;;		___lwmod
  1305 ;; This function is called by:
  1306 ;;		_main
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           	psect	text10
  1311  0007A0                     __ptext10:
  1312                           	callstack 0
  1313  0007A0                     _itoa:
  1314                           	callstack 29
  1315  0007A0                     
  1316                           ;main.c: 81:     str[0] = (val / 10000) + 0x30;
  1317  0007A0  C015  F00E         	movff	itoa@val,___lwdiv@dividend
  1318  0007A4  C016  F00F         	movff	itoa@val+1,___lwdiv@dividend+1
  1319  0007A8  0E27               	movlw	39
  1320  0007AA  6E11               	movwf	(___lwdiv@divisor+1)^0,c
  1321  0007AC  0E10               	movlw	16
  1322  0007AE  6E10               	movwf	___lwdiv@divisor^0,c
  1323  0007B0  EC9C  F004         	call	___lwdiv	;wreg free
  1324  0007B4  500E               	movf	?___lwdiv^0,w,c
  1325  0007B6  0F30               	addlw	48
  1326  0007B8  C017  FFD9         	movff	itoa@str,fsr2l
  1327  0007BC  C018  FFDA         	movff	itoa@str+1,fsr2h
  1328  0007C0  6EDF               	movwf	indf2,c
  1329                           
  1330                           ;main.c: 82:     str[1] = ((val % 10000) / 1000) + 0x30;
  1331  0007C2  EE20 F001          	lfsr	2,1
  1332  0007C6  5017               	movf	itoa@str^0,w,c
  1333  0007C8  26D9               	addwf	fsr2l,f,c
  1334  0007CA  5018               	movf	(itoa@str+1)^0,w,c
  1335  0007CC  22DA               	addwfc	fsr2h,f,c
  1336  0007CE  0E27               	movlw	39
  1337  0007D0  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1338  0007D2  0E10               	movlw	16
  1339  0007D4  6E03               	movwf	___lwmod@divisor^0,c
  1340  0007D6  C015  F001         	movff	itoa@val,___lwmod@dividend
  1341  0007DA  C016  F002         	movff	itoa@val+1,___lwmod@dividend+1
  1342  0007DE  EC3E  F005         	call	___lwmod	;wreg free
  1343  0007E2  C001  F00E         	movff	?___lwmod,___lwdiv@dividend
  1344  0007E6  C002  F00F         	movff	?___lwmod+1,___lwdiv@dividend+1
  1345  0007EA  0E03               	movlw	3
  1346  0007EC  6E11               	movwf	(___lwdiv@divisor+1)^0,c
  1347  0007EE  0EE8               	movlw	232
  1348  0007F0  6E10               	movwf	___lwdiv@divisor^0,c
  1349  0007F2  EC9C  F004         	call	___lwdiv	;wreg free
  1350  0007F6  500E               	movf	?___lwdiv^0,w,c
  1351  0007F8  0F30               	addlw	48
  1352  0007FA  6EDF               	movwf	indf2,c
  1353                           
  1354                           ;main.c: 83:     str[2] = ((val % 1000) / 100) + 0x30;
  1355  0007FC  EE20 F002          	lfsr	2,2
  1356  000800  5017               	movf	itoa@str^0,w,c
  1357  000802  26D9               	addwf	fsr2l,f,c
  1358  000804  5018               	movf	(itoa@str+1)^0,w,c
  1359  000806  22DA               	addwfc	fsr2h,f,c
  1360  000808  0E03               	movlw	3
  1361  00080A  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1362  00080C  0EE8               	movlw	232
  1363  00080E  6E03               	movwf	___lwmod@divisor^0,c
  1364  000810  C015  F001         	movff	itoa@val,___lwmod@dividend
  1365  000814  C016  F002         	movff	itoa@val+1,___lwmod@dividend+1
  1366  000818  EC3E  F005         	call	___lwmod	;wreg free
  1367  00081C  C001  F00E         	movff	?___lwmod,___lwdiv@dividend
  1368  000820  C002  F00F         	movff	?___lwmod+1,___lwdiv@dividend+1
  1369  000824  0E00               	movlw	0
  1370  000826  6E11               	movwf	(___lwdiv@divisor+1)^0,c
  1371  000828  0E64               	movlw	100
  1372  00082A  6E10               	movwf	___lwdiv@divisor^0,c
  1373  00082C  EC9C  F004         	call	___lwdiv	;wreg free
  1374  000830  500E               	movf	?___lwdiv^0,w,c
  1375  000832  0F30               	addlw	48
  1376  000834  6EDF               	movwf	indf2,c
  1377                           
  1378                           ;main.c: 84:     str[3] = ((val % 100) / 10) + 0x30;
  1379  000836  EE20 F003          	lfsr	2,3
  1380  00083A  5017               	movf	itoa@str^0,w,c
  1381  00083C  26D9               	addwf	fsr2l,f,c
  1382  00083E  5018               	movf	(itoa@str+1)^0,w,c
  1383  000840  22DA               	addwfc	fsr2h,f,c
  1384  000842  0E00               	movlw	0
  1385  000844  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1386  000846  0E64               	movlw	100
  1387  000848  6E03               	movwf	___lwmod@divisor^0,c
  1388  00084A  C015  F001         	movff	itoa@val,___lwmod@dividend
  1389  00084E  C016  F002         	movff	itoa@val+1,___lwmod@dividend+1
  1390  000852  EC3E  F005         	call	___lwmod	;wreg free
  1391  000856  C001  F00E         	movff	?___lwmod,___lwdiv@dividend
  1392  00085A  C002  F00F         	movff	?___lwmod+1,___lwdiv@dividend+1
  1393  00085E  0E00               	movlw	0
  1394  000860  6E11               	movwf	(___lwdiv@divisor+1)^0,c
  1395  000862  0E0A               	movlw	10
  1396  000864  6E10               	movwf	___lwdiv@divisor^0,c
  1397  000866  EC9C  F004         	call	___lwdiv	;wreg free
  1398  00086A  500E               	movf	?___lwdiv^0,w,c
  1399  00086C  0F30               	addlw	48
  1400  00086E  6EDF               	movwf	indf2,c
  1401                           
  1402                           ;main.c: 85:     str[4] = (val % 10) + 0x30;
  1403  000870  EE20 F004          	lfsr	2,4
  1404  000874  5017               	movf	itoa@str^0,w,c
  1405  000876  26D9               	addwf	fsr2l,f,c
  1406  000878  5018               	movf	(itoa@str+1)^0,w,c
  1407  00087A  22DA               	addwfc	fsr2h,f,c
  1408  00087C  C015  F001         	movff	itoa@val,___lwmod@dividend
  1409  000880  C016  F002         	movff	itoa@val+1,___lwmod@dividend+1
  1410  000884  0E00               	movlw	0
  1411  000886  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1412  000888  0E0A               	movlw	10
  1413  00088A  6E03               	movwf	___lwmod@divisor^0,c
  1414  00088C  EC3E  F005         	call	___lwmod	;wreg free
  1415  000890  5001               	movf	?___lwmod^0,w,c
  1416  000892  0F30               	addlw	48
  1417  000894  6EDF               	movwf	indf2,c
  1418  000896                     
  1419                           ;main.c: 86:     str[5] = 0;
  1420  000896  EE20 F005          	lfsr	2,5
  1421  00089A  5017               	movf	itoa@str^0,w,c
  1422  00089C  26D9               	addwf	fsr2l,f,c
  1423  00089E  5018               	movf	(itoa@str+1)^0,w,c
  1424  0008A0  22DA               	addwfc	fsr2h,f,c
  1425  0008A2  0E00               	movlw	0
  1426  0008A4  6EDF               	movwf	indf2,c
  1427  0008A6  0012               	return		;funcret
  1428  0008A8                     __end_of_itoa:
  1429                           	callstack 0
  1430                           
  1431 ;; *************** function ___lwmod *****************
  1432 ;; Defined at:
  1433 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\lwmod.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;  dividend        2    0[COMRAM] unsigned int 
  1436 ;;  divisor         2    2[COMRAM] unsigned int 
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;  counter         1    4[COMRAM] unsigned char 
  1439 ;; Return value:  Size  Location     Type
  1440 ;;                  2    0[COMRAM] unsigned int 
  1441 ;; Registers used:
  1442 ;;		wreg, status,2, status,0
  1443 ;; Tracked objects:
  1444 ;;		On entry : 0/0
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1448 ;;      Params:         4       0       0       0       0       0       0
  1449 ;;      Locals:         1       0       0       0       0       0       0
  1450 ;;      Temps:          0       0       0       0       0       0       0
  1451 ;;      Totals:         5       0       0       0       0       0       0
  1452 ;;Total ram usage:        5 bytes
  1453 ;; Hardware stack levels used:    1
  1454 ;; This function calls:
  1455 ;;		Nothing
  1456 ;; This function is called by:
  1457 ;;		_itoa
  1458 ;; This function uses a non-reentrant model
  1459 ;;
  1460                           
  1461                           	psect	text11
  1462  000A7C                     __ptext11:
  1463                           	callstack 0
  1464  000A7C                     ___lwmod:
  1465                           	callstack 29
  1466  000A7C  5003               	movf	___lwmod@divisor^0,w,c
  1467  000A7E  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  1468  000A80  B4D8               	btfsc	status,2,c
  1469  000A82  EF45  F005         	goto	u831
  1470  000A86  EF47  F005         	goto	u830
  1471  000A8A                     u831:
  1472  000A8A  EF6B  F005         	goto	l733
  1473  000A8E                     u830:
  1474  000A8E  0E01               	movlw	1
  1475  000A90  6E05               	movwf	___lwmod@counter^0,c
  1476  000A92  EF4F  F005         	goto	l1467
  1477  000A96                     l1465:
  1478  000A96  90D8               	bcf	status,0,c
  1479  000A98  3603               	rlcf	___lwmod@divisor^0,f,c
  1480  000A9A  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  1481  000A9C  2A05               	incf	___lwmod@counter^0,f,c
  1482  000A9E                     l1467:
  1483  000A9E  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  1484  000AA0  EF54  F005         	goto	u841
  1485  000AA4  EF56  F005         	goto	u840
  1486  000AA8                     u841:
  1487  000AA8  EF4B  F005         	goto	l1465
  1488  000AAC                     u840:
  1489  000AAC                     l1469:
  1490  000AAC  5003               	movf	___lwmod@divisor^0,w,c
  1491  000AAE  5C01               	subwf	___lwmod@dividend^0,w,c
  1492  000AB0  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1493  000AB2  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  1494  000AB4  A0D8               	btfss	status,0,c
  1495  000AB6  EF5F  F005         	goto	u851
  1496  000ABA  EF61  F005         	goto	u850
  1497  000ABE                     u851:
  1498  000ABE  EF65  F005         	goto	l1473
  1499  000AC2                     u850:
  1500  000AC2  5003               	movf	___lwmod@divisor^0,w,c
  1501  000AC4  5E01               	subwf	___lwmod@dividend^0,f,c
  1502  000AC6  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1503  000AC8  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  1504  000ACA                     l1473:
  1505  000ACA  90D8               	bcf	status,0,c
  1506  000ACC  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  1507  000ACE  3203               	rrcf	___lwmod@divisor^0,f,c
  1508  000AD0  2E05               	decfsz	___lwmod@counter^0,f,c
  1509  000AD2  EF56  F005         	goto	l1469
  1510  000AD6                     l733:
  1511  000AD6  C001  F001         	movff	___lwmod@dividend,?___lwmod
  1512  000ADA  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  1513  000ADE  0012               	return		;funcret
  1514  000AE0                     __end_of___lwmod:
  1515                           	callstack 0
  1516                           
  1517 ;; *************** function ___lwdiv *****************
  1518 ;; Defined at:
  1519 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\lwdiv.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;  dividend        2   13[COMRAM] unsigned int 
  1522 ;;  divisor         2   15[COMRAM] unsigned int 
  1523 ;; Auto vars:     Size  Location     Type
  1524 ;;  quotient        2   17[COMRAM] unsigned int 
  1525 ;;  counter         1   19[COMRAM] unsigned char 
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  2   13[COMRAM] unsigned int 
  1528 ;; Registers used:
  1529 ;;		wreg, status,2, status,0
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1535 ;;      Params:         4       0       0       0       0       0       0
  1536 ;;      Locals:         3       0       0       0       0       0       0
  1537 ;;      Temps:          0       0       0       0       0       0       0
  1538 ;;      Totals:         7       0       0       0       0       0       0
  1539 ;;Total ram usage:        7 bytes
  1540 ;; Hardware stack levels used:    1
  1541 ;; This function calls:
  1542 ;;		Nothing
  1543 ;; This function is called by:
  1544 ;;		_main
  1545 ;;		_itoa
  1546 ;;		_pwmSet1
  1547 ;;		_pwmSet2
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           	psect	text12
  1552  000938                     __ptext12:
  1553                           	callstack 0
  1554  000938                     ___lwdiv:
  1555                           	callstack 29
  1556  000938  0E00               	movlw	0
  1557  00093A  6E13               	movwf	(___lwdiv@quotient+1)^0,c
  1558  00093C  0E00               	movlw	0
  1559  00093E  6E12               	movwf	___lwdiv@quotient^0,c
  1560  000940  5010               	movf	___lwdiv@divisor^0,w,c
  1561  000942  1011               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1562  000944  B4D8               	btfsc	status,2,c
  1563  000946  EFA7  F004         	goto	u801
  1564  00094A  EFA9  F004         	goto	u800
  1565  00094E                     u801:
  1566  00094E  EFD1  F004         	goto	l723
  1567  000952                     u800:
  1568  000952  0E01               	movlw	1
  1569  000954  6E14               	movwf	___lwdiv@counter^0,c
  1570  000956  EFB1  F004         	goto	l1447
  1571  00095A                     l1445:
  1572  00095A  90D8               	bcf	status,0,c
  1573  00095C  3610               	rlcf	___lwdiv@divisor^0,f,c
  1574  00095E  3611               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1575  000960  2A14               	incf	___lwdiv@counter^0,f,c
  1576  000962                     l1447:
  1577  000962  AE11               	btfss	(___lwdiv@divisor+1)^0,7,c
  1578  000964  EFB6  F004         	goto	u811
  1579  000968  EFB8  F004         	goto	u810
  1580  00096C                     u811:
  1581  00096C  EFAD  F004         	goto	l1445
  1582  000970                     u810:
  1583  000970                     l1449:
  1584  000970  90D8               	bcf	status,0,c
  1585  000972  3612               	rlcf	___lwdiv@quotient^0,f,c
  1586  000974  3613               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1587  000976  5010               	movf	___lwdiv@divisor^0,w,c
  1588  000978  5C0E               	subwf	___lwdiv@dividend^0,w,c
  1589  00097A  5011               	movf	(___lwdiv@divisor+1)^0,w,c
  1590  00097C  580F               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1591  00097E  A0D8               	btfss	status,0,c
  1592  000980  EFC4  F004         	goto	u821
  1593  000984  EFC6  F004         	goto	u820
  1594  000988                     u821:
  1595  000988  EFCB  F004         	goto	l1457
  1596  00098C                     u820:
  1597  00098C  5010               	movf	___lwdiv@divisor^0,w,c
  1598  00098E  5E0E               	subwf	___lwdiv@dividend^0,f,c
  1599  000990  5011               	movf	(___lwdiv@divisor+1)^0,w,c
  1600  000992  5A0F               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1601  000994  8012               	bsf	___lwdiv@quotient^0,0,c
  1602  000996                     l1457:
  1603  000996  90D8               	bcf	status,0,c
  1604  000998  3211               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1605  00099A  3210               	rrcf	___lwdiv@divisor^0,f,c
  1606  00099C  2E14               	decfsz	___lwdiv@counter^0,f,c
  1607  00099E  EFB8  F004         	goto	l1449
  1608  0009A2                     l723:
  1609  0009A2  C012  F00E         	movff	___lwdiv@quotient,?___lwdiv
  1610  0009A6  C013  F00F         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1611  0009AA  0012               	return		;funcret
  1612  0009AC                     __end_of___lwdiv:
  1613                           	callstack 0
  1614                           
  1615 ;; *************** function _adc_init *****************
  1616 ;; Defined at:
  1617 ;;		line 29 in file "adc.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;		None
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;		None
  1622 ;; Return value:  Size  Location     Type
  1623 ;;                  1    wreg      void 
  1624 ;; Registers used:
  1625 ;;		wreg, status,2
  1626 ;; Tracked objects:
  1627 ;;		On entry : 0/0
  1628 ;;		On exit  : 0/0
  1629 ;;		Unchanged: 0/0
  1630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1631 ;;      Params:         0       0       0       0       0       0       0
  1632 ;;      Locals:         0       0       0       0       0       0       0
  1633 ;;      Temps:          0       0       0       0       0       0       0
  1634 ;;      Totals:         0       0       0       0       0       0       0
  1635 ;;Total ram usage:        0 bytes
  1636 ;; Hardware stack levels used:    1
  1637 ;; This function calls:
  1638 ;;		Nothing
  1639 ;; This function is called by:
  1640 ;;		_main
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text13
  1645  000C1A                     __ptext13:
  1646                           	callstack 0
  1647  000C1A                     _adc_init:
  1648                           	callstack 30
  1649  000C1A                     
  1650                           ;adc.c: 34:     ADCON0 = 0x01;
  1651  000C1A  0E01               	movlw	1
  1652  000C1C  6EC2               	movwf	194,c	;volatile
  1653                           
  1654                           ;adc.c: 35:     ADCON1 = 0x0B;
  1655  000C1E  0E0B               	movlw	11
  1656  000C20  6EC1               	movwf	193,c	;volatile
  1657                           
  1658                           ;adc.c: 36:     ADCON2 = 0x01;
  1659  000C22  0E01               	movlw	1
  1660  000C24  6EC0               	movwf	192,c	;volatile
  1661  000C26  0012               	return		;funcret
  1662  000C28                     __end_of_adc_init:
  1663                           	callstack 0
  1664                           
  1665 ;; *************** function _adc_amostra *****************
  1666 ;; Defined at:
  1667 ;;		line 42 in file "adc.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  canal           1    wreg     unsigned char 
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;  canal           1    6[COMRAM] unsigned char 
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  2    0[COMRAM] unsigned int 
  1674 ;; Registers used:
  1675 ;;		wreg, status,2, status,0
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1681 ;;      Params:         2       0       0       0       0       0       0
  1682 ;;      Locals:         1       0       0       0       0       0       0
  1683 ;;      Temps:          4       0       0       0       0       0       0
  1684 ;;      Totals:         7       0       0       0       0       0       0
  1685 ;;Total ram usage:        7 bytes
  1686 ;; Hardware stack levels used:    1
  1687 ;; This function calls:
  1688 ;;		Nothing
  1689 ;; This function is called by:
  1690 ;;		_main
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           	psect	text14
  1695  0008A8                     __ptext14:
  1696                           	callstack 0
  1697  0008A8                     _adc_amostra:
  1698                           	callstack 30
  1699                           
  1700                           ;incstack = 0
  1701                           ;adc_amostra@canal stored from wreg
  1702  0008A8  6E07               	movwf	adc_amostra@canal^0,c
  1703  0008AA                     
  1704                           ;adc.c: 44:     switch (canal) {
  1705  0008AA  EF63  F004         	goto	l1487
  1706  0008AE                     l1479:
  1707                           
  1708                           ;adc.c: 46:             ADCON0 = 0x01;
  1709  0008AE  0E01               	movlw	1
  1710  0008B0  6EC2               	movwf	194,c	;volatile
  1711                           
  1712                           ;adc.c: 47:             break;
  1713  0008B2  EF7C  F004         	goto	l20
  1714  0008B6                     l1481:
  1715                           
  1716                           ;adc.c: 49:             ADCON0 = 0x09;
  1717  0008B6  0E09               	movlw	9
  1718  0008B8  6EC2               	movwf	194,c	;volatile
  1719                           
  1720                           ;adc.c: 50:             break;
  1721  0008BA  EF7C  F004         	goto	l20
  1722  0008BE                     l1483:
  1723                           
  1724                           ;adc.c: 52:             ADCON0 = 0x05;
  1725  0008BE  0E05               	movlw	5
  1726  0008C0  6EC2               	movwf	194,c	;volatile
  1727                           
  1728                           ;adc.c: 53:             break;
  1729  0008C2  EF7C  F004         	goto	l20
  1730  0008C6                     l1487:
  1731  0008C6  5007               	movf	adc_amostra@canal^0,w,c
  1732  0008C8  6E03               	movwf	??_adc_amostra^0,c
  1733  0008CA  6A04               	clrf	(??_adc_amostra+1)^0,c
  1734                           
  1735                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1736                           ; Switch size 1, requested type "simple"
  1737                           ; Number of cases is 1, Range of values is 0 to 0
  1738                           ; switch strategies available:
  1739                           ; Name         Instructions Cycles
  1740                           ; simple_byte            4     3 (average)
  1741                           ;	Chosen strategy is simple_byte
  1742  0008CC  5004               	movf	(??_adc_amostra+1)^0,w,c
  1743  0008CE  0A00               	xorlw	0	; case 0
  1744  0008D0  B4D8               	btfsc	status,2,c
  1745  0008D2  EF6D  F004         	goto	l1619
  1746  0008D6  EF7C  F004         	goto	l20
  1747  0008DA                     l1619:
  1748                           
  1749                           ; Switch size 1, requested type "simple"
  1750                           ; Number of cases is 3, Range of values is 0 to 2
  1751                           ; switch strategies available:
  1752                           ; Name         Instructions Cycles
  1753                           ; simple_byte           10     6 (average)
  1754                           ;	Chosen strategy is simple_byte
  1755  0008DA  5003               	movf	??_adc_amostra^0,w,c
  1756  0008DC  0A00               	xorlw	0	; case 0
  1757  0008DE  B4D8               	btfsc	status,2,c
  1758  0008E0  EF57  F004         	goto	l1479
  1759  0008E4  0A01               	xorlw	1	; case 1
  1760  0008E6  B4D8               	btfsc	status,2,c
  1761  0008E8  EF5B  F004         	goto	l1481
  1762  0008EC  0A03               	xorlw	3	; case 2
  1763  0008EE  B4D8               	btfsc	status,2,c
  1764  0008F0  EF5F  F004         	goto	l1483
  1765  0008F4  EF7C  F004         	goto	l20
  1766  0008F8                     l20:
  1767                           
  1768                           ;adc.c: 56:     ADCON0bits.GO = 1;
  1769  0008F8  82C2               	bsf	194,1,c	;volatile
  1770  0008FA                     l23:
  1771  0008FA  B2C2               	btfsc	194,1,c	;volatile
  1772  0008FC  EF82  F004         	goto	u861
  1773  000900  EF84  F004         	goto	u860
  1774  000904                     u861:
  1775  000904  EF7D  F004         	goto	l23
  1776  000908                     u860:
  1777  000908                     
  1778                           ;adc.c: 59:     return ((((unsigned int) ADRESH) << 2) | (ADRESL >> 6));
  1779  000908  CFC3 F003          	movff	4035,??_adc_amostra	;volatile
  1780  00090C  0E06               	movlw	6
  1781  00090E  6E04               	movwf	(??_adc_amostra+1)^0,c
  1782  000910                     u875:
  1783  000910  90D8               	bcf	status,0,c
  1784  000912  3203               	rrcf	??_adc_amostra^0,f,c
  1785  000914  2E04               	decfsz	(??_adc_amostra+1)^0,f,c
  1786  000916  EF88  F004         	goto	u875
  1787  00091A  5003               	movf	??_adc_amostra^0,w,c
  1788  00091C  CFC4 F005          	movff	4036,??_adc_amostra+2	;volatile
  1789  000920  6A06               	clrf	(??_adc_amostra+3)^0,c
  1790  000922  90D8               	bcf	status,0,c
  1791  000924  3605               	rlcf	(??_adc_amostra+2)^0,f,c
  1792  000926  3606               	rlcf	(??_adc_amostra+3)^0,f,c
  1793  000928  90D8               	bcf	status,0,c
  1794  00092A  3605               	rlcf	(??_adc_amostra+2)^0,f,c
  1795  00092C  3606               	rlcf	(??_adc_amostra+3)^0,f,c
  1796  00092E  1005               	iorwf	(??_adc_amostra+2)^0,w,c
  1797  000930  6E01               	movwf	?_adc_amostra^0,c
  1798  000932  5006               	movf	(??_adc_amostra+3)^0,w,c
  1799  000934  6E02               	movwf	(?_adc_amostra+1)^0,c
  1800  000936  0012               	return		;funcret
  1801  000938                     __end_of_adc_amostra:
  1802                           	callstack 0
  1803                           
  1804                           	psect	rparam
  1805  0000                     
  1806                           	psect	idloc
  1807                           
  1808                           ;Config register IDLOC0 @ 0x200000
  1809                           ;	unspecified, using default values
  1810  200000                     	org	2097152
  1811  200000  FF                 	db	255
  1812                           
  1813                           ;Config register IDLOC1 @ 0x200001
  1814                           ;	unspecified, using default values
  1815  200001                     	org	2097153
  1816  200001  FF                 	db	255
  1817                           
  1818                           ;Config register IDLOC2 @ 0x200002
  1819                           ;	unspecified, using default values
  1820  200002                     	org	2097154
  1821  200002  FF                 	db	255
  1822                           
  1823                           ;Config register IDLOC3 @ 0x200003
  1824                           ;	unspecified, using default values
  1825  200003                     	org	2097155
  1826  200003  FF                 	db	255
  1827                           
  1828                           ;Config register IDLOC4 @ 0x200004
  1829                           ;	unspecified, using default values
  1830  200004                     	org	2097156
  1831  200004  FF                 	db	255
  1832                           
  1833                           ;Config register IDLOC5 @ 0x200005
  1834                           ;	unspecified, using default values
  1835  200005                     	org	2097157
  1836  200005  FF                 	db	255
  1837                           
  1838                           ;Config register IDLOC6 @ 0x200006
  1839                           ;	unspecified, using default values
  1840  200006                     	org	2097158
  1841  200006  FF                 	db	255
  1842                           
  1843                           ;Config register IDLOC7 @ 0x200007
  1844                           ;	unspecified, using default values
  1845  200007                     	org	2097159
  1846  200007  FF                 	db	255
  1847                           
  1848                           	psect	config
  1849                           
  1850                           ; Padding undefined space
  1851  300000                     	org	3145728
  1852  300000  FF                 	db	255
  1853                           
  1854                           ;Config register CONFIG1H @ 0x300001
  1855                           ;	Oscillator Selection bits
  1856                           ;	OSC = HS, HS oscillator
  1857                           ;	Fail-Safe Clock Monitor Enable bit
  1858                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1859                           ;	Internal/External Oscillator Switchover bit
  1860                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1861  300001                     	org	3145729
  1862  300001  02                 	db	2
  1863                           
  1864                           ;Config register CONFIG2L @ 0x300002
  1865                           ;	Power-up Timer Enable bit
  1866                           ;	PWRT = OFF, PWRT disabled
  1867                           ;	Brown-out Reset Enable bits
  1868                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1869                           ;	Brown Out Reset Voltage bits
  1870                           ;	BORV = 0x2E, user specified literal
  1871  300002                     	org	3145730
  1872  300002  71                 	db	369
  1873                           
  1874                           ;Config register CONFIG2H @ 0x300003
  1875                           ;	Watchdog Timer Enable bit
  1876                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1877                           ;	Watchdog Timer Postscale Select bits
  1878                           ;	WDTPS = 1, 1:1
  1879  300003                     	org	3145731
  1880  300003  00                 	db	0
  1881                           
  1882                           ; Padding undefined space
  1883  300004                     	org	3145732
  1884  300004  FF                 	db	255
  1885                           
  1886                           ;Config register CONFIG3H @ 0x300005
  1887                           ;	CCP2 MUX bit
  1888                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1889                           ;	PORTB A/D Enable bit
  1890                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  1891                           ;	Low-Power Timer1 Oscillator Enable bit
  1892                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1893                           ;	MCLR Pin Enable bit
  1894                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1895  300005                     	org	3145733
  1896  300005  83                 	db	131
  1897                           
  1898                           ;Config register CONFIG4L @ 0x300006
  1899                           ;	Stack Full/Underflow Reset Enable bit
  1900                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1901                           ;	Single-Supply ICSP Enable bit
  1902                           ;	LVP = OFF, Single-Supply ICSP disabled
  1903                           ;	Extended Instruction Set Enable bit
  1904                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1905                           ;	Background Debugger Enable bit
  1906                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  1907  300006                     	org	3145734
  1908  300006  80                 	db	128
  1909                           
  1910                           ; Padding undefined space
  1911  300007                     	org	3145735
  1912  300007  FF                 	db	255
  1913                           
  1914                           ;Config register CONFIG5L @ 0x300008
  1915                           ;	Code Protection bit
  1916                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1917                           ;	Code Protection bit
  1918                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1919                           ;	Code Protection bit
  1920                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1921                           ;	Code Protection bit
  1922                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1923  300008                     	org	3145736
  1924  300008  0F                 	db	15
  1925                           
  1926                           ;Config register CONFIG5H @ 0x300009
  1927                           ;	Boot Block Code Protection bit
  1928                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1929                           ;	Data EEPROM Code Protection bit
  1930                           ;	CPD = OFF, Data EEPROM not code-protected
  1931  300009                     	org	3145737
  1932  300009  C0                 	db	192
  1933                           
  1934                           ;Config register CONFIG6L @ 0x30000A
  1935                           ;	Write Protection bit
  1936                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1937                           ;	Write Protection bit
  1938                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1939                           ;	Write Protection bit
  1940                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1941                           ;	Write Protection bit
  1942                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1943  30000A                     	org	3145738
  1944  30000A  0F                 	db	15
  1945                           
  1946                           ;Config register CONFIG6H @ 0x30000B
  1947                           ;	Configuration Register Write Protection bit
  1948                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1949                           ;	Boot Block Write Protection bit
  1950                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1951                           ;	Data EEPROM Write Protection bit
  1952                           ;	WRTD = OFF, Data EEPROM not write-protected
  1953  30000B                     	org	3145739
  1954  30000B  E0                 	db	224
  1955                           
  1956                           ;Config register CONFIG7L @ 0x30000C
  1957                           ;	Table Read Protection bit
  1958                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1959                           ;	Table Read Protection bit
  1960                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1961                           ;	Table Read Protection bit
  1962                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1963                           ;	Table Read Protection bit
  1964                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1965  30000C                     	org	3145740
  1966  30000C  0F                 	db	15
  1967                           
  1968                           ;Config register CONFIG7H @ 0x30000D
  1969                           ;	Boot Block Table Read Protection bit
  1970                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1971  30000D                     	org	3145741
  1972  30000D  40                 	db	64
  1973                           tosu	equ	0xFFF
  1974                           tosh	equ	0xFFE
  1975                           tosl	equ	0xFFD
  1976                           stkptr	equ	0xFFC
  1977                           pclatu	equ	0xFFB
  1978                           pclath	equ	0xFFA
  1979                           pcl	equ	0xFF9
  1980                           tblptru	equ	0xFF8
  1981                           tblptrh	equ	0xFF7
  1982                           tblptrl	equ	0xFF6
  1983                           tablat	equ	0xFF5
  1984                           prodh	equ	0xFF4
  1985                           prodl	equ	0xFF3
  1986                           indf0	equ	0xFEF
  1987                           postinc0	equ	0xFEE
  1988                           postdec0	equ	0xFED
  1989                           preinc0	equ	0xFEC
  1990                           plusw0	equ	0xFEB
  1991                           fsr0h	equ	0xFEA
  1992                           fsr0l	equ	0xFE9
  1993                           wreg	equ	0xFE8
  1994                           indf1	equ	0xFE7
  1995                           postinc1	equ	0xFE6
  1996                           postdec1	equ	0xFE5
  1997                           preinc1	equ	0xFE4
  1998                           plusw1	equ	0xFE3
  1999                           fsr1h	equ	0xFE2
  2000                           fsr1l	equ	0xFE1
  2001                           bsr	equ	0xFE0
  2002                           indf2	equ	0xFDF
  2003                           postinc2	equ	0xFDE
  2004                           postdec2	equ	0xFDD
  2005                           preinc2	equ	0xFDC
  2006                           plusw2	equ	0xFDB
  2007                           fsr2h	equ	0xFDA
  2008                           fsr2l	equ	0xFD9
  2009                           status	equ	0xFD8

Data Sizes:
    Strings     40
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     34      34
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    itoa@str	PTR unsigned char  size(2) Largest target is 6
		 -> main@str(COMRAM[6]), 

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_4(CODE[10]), STR_3(CODE[9]), STR_2(CODE[8]), STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_pwmSet1
    _pwmSet1->___lwdiv
    ___wmul->_adc_amostra
    _lcd_str->_lcd_dat
    _lcd_dat->_atraso_ms
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms
    _itoa->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   11505
                                             25 COMRAM     9     9      0
                            ___lwdiv
                             ___wmul
                        _adc_amostra
                           _adc_init
                          _atraso_ms
                               _itoa
                            _lcd_cmd
                            _lcd_dat
                           _lcd_init
                            _lcd_str
                            _pwmInit
                            _pwmSet1
 ---------------------------------------------------------------------------------
 (1) _pwmSet1                                              5     5      0    1932
                                             20 COMRAM     5     5      0
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     615
                                              7 COMRAM     6     2      4
                        _adc_amostra (ARG)
 ---------------------------------------------------------------------------------
 (1) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_str                                              5     3      2    1177
                                              7 COMRAM     5     3      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (2) _lcd_dat                                              1     1      0     783
                                              6 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    1529
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0     783
                                              6 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_wr                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _atraso_ms                                            6     4      2     746
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _itoa                                                 4     0      4    2387
                                             20 COMRAM     4     0      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1226
                                             13 COMRAM     7     3      4
                            ___lwmod (ARG)
                             ___wmul (ARG)
                        _adc_amostra (ARG)
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_amostra                                          7     5      2      22
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwdiv
     ___lwmod (ARG)
     ___wmul (ARG)
       _adc_amostra (ARG)
     _adc_amostra (ARG)
   ___wmul
     _adc_amostra (ARG)
   _adc_amostra
   _adc_init
   _atraso_ms
   _itoa
     ___lwdiv
       ___lwmod (ARG)
       ___wmul (ARG)
         _adc_amostra (ARG)
       _adc_amostra (ARG)
     ___lwmod
   _lcd_cmd
     _atraso_ms
     _lcd_wr
   _lcd_dat
     _atraso_ms
     _lcd_wr
   _lcd_init
     _atraso_ms
     _lcd_cmd
       _atraso_ms
       _lcd_wr
   _lcd_str
     _lcd_dat
       _atraso_ms
       _lcd_wr
   _pwmInit
   _pwmSet1
     ___lwdiv
       ___lwmod (ARG)
       ___wmul (ARG)
         _adc_amostra (ARG)
       _adc_amostra (ARG)
     ___wmul
       _adc_amostra (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     22      22       1       26.8%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Fri Dec 18 23:38:27 2020

                     l20 08F8                       l23 08FA                       l15 0C26  
                     l26 0936                       l36 0A7A      ___wmul@multiplicand 000A  
   __size_of_adc_amostra 0090                      l220 0A16                      l232 0C04  
                    l217 08A6                      l161 0BB4                      l170 0B8A  
                    l155 0C38                      l164 0B3A                      l229 0C18  
                    l158 0BDE                      l730 09AA                      l723 09A2  
                    l740 0ADE                      l733 0AD6                      l931 0C34  
                    u800 0952                      u801 094E                      u810 0970  
                    u811 096C                      u820 098C                      u900 06DA  
                    u821 0988                      u901 06D6                      u830 0A8E  
                    u910 0702                      u831 0A8A                      u911 06FE  
                    u840 0AAC                      u920 0712                      u841 0AA8  
                    u921 070E                      u850 0AC2                      u770 0A38  
                    u930 073A                      u851 0ABE                      u771 0A34  
                    u931 0736                      u860 0908                      u780 0A50  
                    u940 074A                      u861 0904                      u781 0A4C  
                    u941 0746                      u790 0A7A                      u791 0A76  
                    u880 0B8A                      u881 0B86                      u890 06CA  
                    u875 0910                      u891 06C6                     l1005 0C1A  
                   l1071 0C06                     l1401 0A60                     l1073 0C0A  
                   l1403 0A64                     l1411 0BC2                     l1075 0C0E  
                   l1413 0BCE                     l1405 0BB8                     l1501 0AF0  
                   l1421 0B90                     l1511 07A0                     l1415 0BD0  
                   l1407 0BBA                     l1431 0BB2                     l1423 0B96  
                   l1503 0B3C                     l1441 0940                     l1513 0896  
                   l1417 0BDC                     l1409 0BC0                     l1425 0B98  
                   l1505 0B44                     l1433 0BE0                     l1521 09F0  
                   l1601 0786                     l1451 0976                     l1443 0952  
                   l1427 0BA4                     l1419 0B8E                     l1507 0B60  
                   l1435 0BFC                     l1523 0A08                     l1515 09AE  
                   l1603 078C                     l1531 064E                     l1453 098C  
                   l1445 095A                     l1461 0A7C                     l1381 0A24  
                   l1429 0BA6                     l1509 0B62                     l1517 09CC  
                   l1541 069C                     l1533 0652                     l1525 062A  
                   l1455 0994                     l1447 0962                     l1439 0938  
                   l1471 0AC2                     l1463 0A8E                     l1383 0A28  
                   l1519 09E8                     l1551 06DA                     l1543 06A2  
                   l1535 0658                     l1527 0646                     l1481 08B6  
                   l1457 0996                     l1449 0970                     l1473 0ACA  
                   l1465 0A96                     l1393 0A54                     l1553 06E0  
                   l1561 06F2                     l1545 06B4                     l1537 065E  
                   l1529 064A                     l1619 08DA                     l1483 08BE  
                   l1459 099C                     l1475 0AD0                     l1467 0A9E  
                   l1387 0A3C                     l1379 0A18                     l1571 0726  
                   l1563 0702                     l1555 06EC                     l1547 06B8  
                   l1539 066A                     l1477 08AA                     l1469 0AAC  
                   l1397 0A5A                     l1389 0A40                     l1581 0750  
                   l1573 0728                     l1565 0712                     l1557 06EE  
                   l1549 06CA                     l1479 08AE                     l1487 08C6  
                   l1591 0768                     l1583 075C                     l1567 0718  
                   l1575 072A                     l1559 06F0                     l1489 0908  
                   l1497 0AE0                     l1593 076E                     l1585 075E  
                   l1577 073A                     l1569 0724                     l1499 0AE4  
                   l1595 0774                     l1587 0760                     l1579 074A  
                   l1597 077A                     l1589 0762                     l1599 0780  
                   STR_1 0601                     STR_2 0621                     STR_3 0618  
                   STR_4 060E                     _main 062A                     _itoa 07A0  
                   fsr2h 000FDA                     indf2 000FDF                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
           ___param_bank 000000                    ?_main 0001                    ?_itoa 0015  
        __end_of___lwdiv 09AC          __end_of___lwmod 0AE0                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82                    _PORTD 000F83  
                  _PORTE 000F84                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
        __end_of_lcd_dat 0BB6          __end_of_lcd_cmd 0BE0          __end_of_lcd_str 0B8C  
                  tablat 000FF5          __end_of_pwmSet1 0A18          __end_of_pwmInit 0C1A  
                  status 000FD8          __initialization 0C28             __end_of_main 07A0  
           __end_of_itoa 08A8                   ??_main 001A                   ??_itoa 0019  
          __activetblptr 000002                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0                   _ADRESH 000FC4                   _ADRESL 000FC3  
       __end_of_adc_init 0C28         __end_of_lcd_init 0B3C                   ___wmul 0BE0  
              ??___lwdiv 0012                ??___lwmod 0005                   _lcd_wr 0C32  
              ??_lcd_dat 0007                ??_lcd_cmd 0007                ??_lcd_str 000A  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_pwmSet1 0015                ??_pwmInit 0001  
             __accesstop 0080  __end_of__initialization 0C28            ___rparam_used 000001  
         __pcstackCOMRAM 0001       __size_of_atraso_ms 0064                  ?___wmul 0008  
          ??_adc_amostra 0003                  ?_lcd_wr 0001                ?_adc_init 0001  
              ?_lcd_init 0001                  __Hparam 0000                  __Lparam 0000  
        __size_of___wmul 0026                  ___lwdiv 0938                  ___lwmod 0A7C  
      __end_of_atraso_ms 0A7C             __psmallconst 0600          __size_of_lcd_wr 0008  
                __pcinit 0C28                  __ramtop 0600               ??_adc_init 0001  
                __ptext0 062A                  __ptext1 09AC                  __ptext2 0BE0  
                __ptext3 0C06                  __ptext4 0B3C                  __ptext5 0B8C  
                __ptext6 0AE0                  __ptext7 0BB6                  __ptext8 0C32  
                __ptext9 0A18                  _lcd_dat 0B8C                  _lcd_cmd 0BB6  
                _lcd_str 0B3C      __end_of_adc_amostra 0938                  _pwmSet1 09AC  
                _pwmInit 0C06                  main@tmp 0020               ??_lcd_init 0008  
                main@str 001A     end_of_initialization 0C28                  itoa@val 0015  
          __Lmediumconst 0000                  itoa@str 0017                _PORTCbits 000F82  
              _PORTEbits 000F84                _TRISCbits 000F94               lcd_dat@val 0007  
             lcd_cmd@val 0007               lcd_str@str 0008              _adc_amostra 08A8  
             atraso_ms@i 0003               atraso_ms@j 0005               atraso_ms@k 0006  
         __end_of___wmul 0C06           __end_of_lcd_wr 0C3A      start_initialization 0C28  
               ??___wmul 000C                 ??_lcd_wr 0001        __size_of_adc_init 000E  
      __size_of_lcd_init 005C         ___lwdiv@dividend 000E                 ?___lwdiv 000E  
               ?___lwmod 0001                 ?_lcd_dat 0001                 ?_lcd_cmd 0001  
               ?_lcd_str 0008                _atraso_ms 0A18              __smallconst 0600  
               ?_pwmSet1 0001                 ?_pwmInit 0001         ___lwdiv@quotient 0012  
         atraso_ms@valor 0001           ___wmul@product 000C               pwmSet1@val 0018  
             _ADCON0bits 000FC2        ___wmul@multiplier 0008               ?_atraso_ms 0001  
              lcd_wr@val 0001                 __Hrparam 0000                 __Lrparam 0000  
           ?_adc_amostra 0001         __size_of___lwdiv 0074         __size_of___lwmod 0064  
        pwmSet1@porcento 0017                 _adc_init 0C1A         __size_of_lcd_dat 002A  
       __size_of_lcd_cmd 002A         __size_of_lcd_str 0050          ___lwdiv@divisor 0010  
        ___lwdiv@counter 0014                 __ptext10 07A0                 __ptext11 0A7C  
               __ptext12 0938                 __ptext13 0C1A                 __ptext14 08A8  
       __size_of_pwmSet1 006C         __size_of_pwmInit 0014                 _lcd_init 0AE0  
          __size_of_main 0176            __size_of_itoa 0108                 main@grau 0021  
               lcd_str@i 000C                 main@temp 0022              ??_atraso_ms 0003  
       ___lwmod@dividend 0001          ___lwmod@divisor 0003          ___lwmod@counter 0005  
       adc_amostra@canal 0007  
